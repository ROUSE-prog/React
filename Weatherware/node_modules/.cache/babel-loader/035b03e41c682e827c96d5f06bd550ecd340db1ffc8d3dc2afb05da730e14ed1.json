{"ast":null,"code":"var _jsxFileName = \"/Users/stevenrouse/Documents/React/Weatherware/src/Components/EightHourForecast.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EightHourForecast = _ref => {\n  _s();\n  let {\n    latitude,\n    longitude\n  } = _ref;\n  const apiKey = '6800caad12320e5ffdaba91392446b18';\n  const [forecastData, setForecastData] = useState([]);\n  const fetchForecastData = async () => {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=current,minutely,daily,alerts&appid=${apiKey}&units=metric`);\n    const data = await response.json();\n    setForecastData(data.hourly.slice(0, 8));\n  };\n  useEffect(() => {\n    fetchForecastData();\n  }, [latitude, longitude]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"8-Hour Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: forecastData.map((hour, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time: \", new Date(hour.dt * 1000).toLocaleTimeString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature: \", hour.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Weather: \", hour.weather[0].description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(EightHourForecast, \"ICMKhofs5jc8xe0gv6oPHbIvfl4=\");\n_c = EightHourForecast;\nexport default EightHourForecast;\nvar _c;\n$RefreshReg$(_c, \"EightHourForecast\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","EightHourForecast","_ref","_s","latitude","longitude","apiKey","forecastData","setForecastData","fetchForecastData","response","fetch","data","json","hourly","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","map","hour","index","Date","dt","toLocaleTimeString","temp","weather","description","_c","$RefreshReg$"],"sources":["/Users/stevenrouse/Documents/React/Weatherware/src/Components/EightHourForecast.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst EightHourForecast = ({ latitude, longitude }) => {\n\n  const apiKey = '6800caad12320e5ffdaba91392446b18';\n  const [forecastData, setForecastData] = useState([]);\n\n  const fetchForecastData = async () => {\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=current,minutely,daily,alerts&appid=${apiKey}&units=metric`\n    );\n    const data = await response.json();\n    setForecastData(data.hourly.slice(0, 8));\n  };\n\n  useEffect(() => {\n    fetchForecastData();\n  }, [latitude, longitude]);\n\n  return (\n    <div>\n      <h2>8-Hour Forecast</h2>\n      <div>\n        {forecastData.map((hour, index) => (\n          <div key={index}>\n            <p>Time: {new Date(hour.dt * 1000).toLocaleTimeString()}</p>\n            <p>Temperature: {hour.temp}Â°C</p>\n            <p>Weather: {hour.weather[0].description}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default EightHourForecast;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,iBAAiB,GAAGC,IAAA,IAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAAH,IAAA;EAEhD,MAAMI,MAAM,GAAG,kCAAkC;EACjD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMY,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,uDAAsDP,QAAS,QAAOC,SAAU,gDAA+CC,MAAO,eAAc,CACtJ;IACD,MAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAClCL,eAAe,CAACI,IAAI,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdW,iBAAiB,EAAE;EACrB,CAAC,EAAE,CAACL,QAAQ,EAAEC,SAAS,CAAC,CAAC;EAEzB,oBACEL,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACxBpB,OAAA;MAAAgB,QAAA,EACGT,YAAY,CAACc,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC5BvB,OAAA;QAAAgB,QAAA,gBACEhB,OAAA;UAAAgB,QAAA,GAAG,QAAM,EAAC,IAAIQ,IAAI,CAACF,IAAI,CAACG,EAAE,GAAG,IAAI,CAAC,CAACC,kBAAkB,EAAE;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,eAC5DpB,OAAA;UAAAgB,QAAA,GAAG,eAAa,EAACM,IAAI,CAACK,IAAI,EAAC,OAAE;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAI,eACjCpB,OAAA;UAAAgB,QAAA,GAAG,WAAS,EAACM,IAAI,CAACM,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK;MAAA,GAHrCG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAKhB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV,CAAC;AAACjB,EAAA,CA/BIF,iBAAiB;AAAA6B,EAAA,GAAjB7B,iBAAiB;AAiCvB,eAAeA,iBAAiB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}