{"ast":null,"code":"var _jsxFileName = \"/Users/stevenrouse/Documents/React/wordle-clone/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ScoreTracker from \"./ScoreTracker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [guess, setGuess] = useState(\"\");\n  const [history, setHistory] = useState([]);\n  const [secretWord, setSecretWord] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const fetchWord = async () => {\n    const result = await axios(`http://api.wordnik.com/v4/words.json/randomWord?hasDictionaryDef=true&minLength=5&maxLength=5&api_key=YOUR_API_KEY`);\n    setSecretWord(result.data.word.toLowerCase());\n  };\n  useEffect(() => {\n    fetchWord();\n  }, []);\n  const handleChange = e => {\n    setGuess(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (guess.length === 5) {\n      setHistory([...history, guess]);\n      if (guess === secretWord) {\n        setScore(score + 1);\n        setGuess(\"\");\n        fetchWord();\n      } else {\n        setGuess(\"\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wordle Clone\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreTracker, {\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: guess,\n        onChange: handleChange,\n        maxLength: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: history.map((h, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: h.split(\"\").map((char, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: secretWord[i] === char ? \"green\" : \"red\"\n          },\n          children: char\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/ZunjhbCmCRfQA9vLr7MCD02vss=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","ScoreTracker","jsxDEV","_jsxDEV","App","_s","guess","setGuess","history","setHistory","secretWord","setSecretWord","score","setScore","fetchWord","result","data","word","toLowerCase","handleChange","e","target","value","handleSubmit","preventDefault","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","maxLength","map","h","index","split","char","i","style","color","_c","$RefreshReg$"],"sources":["/Users/stevenrouse/Documents/React/wordle-clone/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ScoreTracker from \"./ScoreTracker\";\n\nfunction App() {\n  const [guess, setGuess] = useState(\"\");\n  const [history, setHistory] = useState([]);\n  const [secretWord, setSecretWord] = useState(\"\");\n  const [score, setScore] = useState(0);\n\n  const fetchWord = async () => {\n    const result = await axios(\n      `http://api.wordnik.com/v4/words.json/randomWord?hasDictionaryDef=true&minLength=5&maxLength=5&api_key=YOUR_API_KEY`\n    );\n    setSecretWord(result.data.word.toLowerCase());\n  };\n\n  useEffect(() => {\n    fetchWord();\n  }, []);\n\n  const handleChange = (e) => {\n    setGuess(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (guess.length === 5) {\n      setHistory([...history, guess]);\n      if (guess === secretWord) {\n        setScore(score + 1);\n        setGuess(\"\");\n        fetchWord();\n      } else {\n        setGuess(\"\");\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Wordle Clone</h1>\n      <ScoreTracker score={score} />\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={guess} onChange={handleChange} maxLength=\"5\" />\n        <button type=\"submit\">Guess</button>\n      </form>\n      <div>\n        {history.map((h, index) => (\n          <p key={index}>\n            {h.split(\"\").map((char, i) => (\n              <span key={i} style={{ color: secretWord[i] === char ? \"green\" : \"red\" }}>\n                {char}\n              </span>\n            ))}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}